# raw = images + labels generated by pixelannotationtool
# images = just images for training
# labels = just labels for training


# simple script to prepare image names/formats for training
import os
from PIL import Image
import cv2
import numpy as np
import shutil

# iterate over images convert jpg to png
# god help me the day someone uses .jpeg
#directory1 = "./images/"
#for filename in os.listdir(directory1):
#	f = os.path.join(directory1, filename)
#	if os.path.isfile(f):
#		if ".jpg" in f: 
#			im = Image.open(f)
#			im.save(f.replace(".jpg",".png"))
#			os.remove(f)

#directory2 = "./annotations/"
# iterate over annotations and removes extraneous text
#for filename in os.listdir(directory2):
#	f = os.path.join(directory2, filename)
#	if os.path.isfile(f):
#		g = f.replace("_watershed_mask","")
#		if "_watershed_mask" in f:
#			os.rename(f,g)
#		img = cv2.imread(g, cv2.IMREAD_GRAYSCALE)
#		ret,th1 = cv2.threshold(img,0,255,cv2.THRESH_TRUNC)
#		cv2.imwrite(g,th1)

# loop through images in raw, skip masks
rawdir = "./raw/"
annotdir = "./annotations/"
imagedir = "./images/"
for filename in os.listdir(rawdir):
	if "_mask.png" in filename:
		continue
	# Copy image to images folder ensure its a png
	im = Image.open(os.path.join(rawdir, filename))
	filename = filename.replace(".jpg", ".png")
	im.save(os.path.join(imagedir, filename)) #TODO: figure out if I want to convert names to number/indexes
	# Copy the corresponding mask
	maskfile = filename[:filename.rfind(".")] + "_color_mask.png"
	im = Image.open(os.path.join(rawdir, maskfile))
	# For some reason PixelAnnotationTool adds a border of white pixels so those are removed here
	im = im.convert("RGBA")
	data = np.array(im)
	red, green, blue, alpha = data.T
	white_areas = (red == 255) & (blue == 255) & (green == 255)
	data[..., :-1][white_areas.T] = (255,0,0)
	im2 = Image.fromarray(data)
	im2.save(os.path.join(annotdir, filename))
